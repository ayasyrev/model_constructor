# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_xresnet.ipynb (unless otherwise specified).

__all__ = ['ResBlock', 'xresnet18', 'xresnet34', 'xresnet50']

# Cell
import torch.nn as nn
import torch
from collections import OrderedDict

# Cell
from .constructor import *
from .layers import *

# Cell
class ResBlock(nn.Module):
    def __init__(self, ni, nh, expansion=1, stride=1, conv_layer=ConvLayer,
                 act_fn=act_fn, **kwargs):
        super().__init__()
#         print(f"ni {ni}, nh {nh}, exp {expansion}, stride {stride}")
        nf,ni = nh*expansion,ni*expansion
#         print(f"new ni {ni}, nf {nf}")
        layers  = [('conv_0', conv_layer(ni, nh, 3, stride=stride)),
                   ('conv_1', conv_layer(nh, nf, 3, zero_bn=True, act=False))
        ] if expansion == 1 else [
                   ('conv_0', conv_layer(ni, nh, 1)),
                   ('conv_1', conv_layer(nh, nh, 3, stride=stride)),
                   ('conv_2', conv_layer(nh, nf, 1, zero_bn=True, act=False))
        ]
        self.convs = nn.Sequential(OrderedDict(layers))
        # TODO: check whether act=True works better
        identity = [] if stride==1 else [('pool', nn.AvgPool2d(2, ceil_mode=True))]
        identity += [] if ni==nf else [('idconv', conv_layer(ni, nf, 1, act=False))]
        self.identity = Noop() if identity==[] else nn.Sequential(OrderedDict(identity))
        self.merge = Noop() # us it to visualize in repr residual connection
        self.act_fn = act_fn

    def forward(self, x): return self.act_fn(self.merge(self.convs(x) + self.identity(x)))

# Cell
def xresnet18(**kwargs):
    """Constructs a xresnet-18 model. """
    return Net(stem_sizes=[32,32], block=ResBlock, blocks=[2, 2, 2, 2], expansion=1, **kwargs)
def xresnet34(**kwargs):
    """Constructs axresnet-34 model. """
    return Net(stem_sizes=[32,32], block=ResBlock, blocks=[3, 4, 6, 3], expansion=1, **kwargs)
def xresnet50(**kwargs):
    """Constructs axresnet-34 model. """
    return Net(stem_sizes=[32,32],block=ResBlock, blocks=[3, 4, 6, 3], expansion=4, **kwargs)