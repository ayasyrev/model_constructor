# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_resnet.ipynb (unless otherwise specified).

__all__ = ['Bottleneck', 'resnet18', 'resnet34', 'resnet50']

# Cell
import torch.nn as nn
import torch
from collections import OrderedDict

# Cell
from .constructor import *
from .layers import *

# Cell
class Bottleneck(nn.Module):
    '''Bottlneck block for resnet models'''
    def __init__(self, ni, nh, expansion=4, stride=1,
                 bn_1st=False, zero_bn=False, **kwargs):
#                  groups=1, base_width=64, dilation=1, norm_layer=None
        super().__init__()
        self.downsample = not ni==nh or stride==2
        ni = ni*expansion
        nf = nh*expansion
        self.conv = nn.Sequential(OrderedDict([
            ('conv_0', ConvLayer(ni, nh, ks=1,          bn_1st=bn_1st, **kwargs)),
            ('conv_1', ConvLayer(nh, nh, stride=stride, bn_1st=bn_1st, **kwargs)),
            ('conv_2', ConvLayer(nh, nf, ks=1, zero_bn=zero_bn, bn_1st=bn_1st, **kwargs))]))
        if self.downsample:
            self.downsample = ConvLayer(ni, nf, ks=1, stride=stride, act=False, **kwargs)
        self.merge = Noop()
        self.act_conn = act_fn

    def forward(self, x):
        identity = x
        out = self.conv(x)
        if self.downsample:
            identity = self.downsample(x)
        return self.act_conn(self.merge(out + identity))

# Cell
def resnet18(**kwargs):
    """Constructs a ResNet-18 model. """
    return Net(block=BasicBlock, blocks=[2, 2, 2, 2], **kwargs)
def resnet34(**kwargs):
    """Constructs a ResNet-34 model. """
    return Net(block=BasicBlock, blocks=[3, 4, 6, 3], **kwargs)
def resnet50(**kwargs):
    """Constructs a ResNet-18 model. """
    return Net(block=Bottleneck, expansion=4, blocks=[3, 4, 6, 3], **kwargs)